name: Dev - Liquibase deployments 1 release
on: 
  release: 
    types: [ published, edited]
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
          required: true
          type: choice
          description: "environment"
          options:
            - "Dev"
      liquibase_tag:
          required: true
          type: string
          description: "Liquibase tag to apply (e.g. liquibase-dev-deploy-123)"
  # pull_request:
  #   types: [ opened, edited ]
  #   branches:
  #     - main
  # push:
  #   branches:
  #     - testing


jobs:
  DEV_Liquibase_Job:
    if: github.event_name == 'release'
    runs-on: windows-latest

    steps:
      - name: Clone Repo
        uses: actions/checkout@v4

      - name: Fetch all tags
        run: git fetch origin 'refs/tags/*:refs/tags/*' --force

      - name: Get the latest 2 release tags & changes between them
        id: list-changes
        shell: pwsh
        run: |
          $RELEASE_TAGS = @(gh release list --limit 2 | awk '{print $1}')
          Write-Host "Found Tags: $($RELEASE_TAGS -join ', ')"

          if (-not $RELEASE_TAGS) {
            Write-Host "No tags found!"
            exit 1
          }

          $newerTag = $RELEASE_TAGS[0]
          $olderTag = $RELEASE_TAGS[1]
          Write-Host "Comparing changes between $olderTag and $newerTag"

          $changed_files = git diff --name-only $olderTag $newerTag
          Write-Host "Changed files:"
          $changed_files

          $filtered_dirs = $changed_files | Select-String -Pattern '/' | ForEach-Object { $_ -replace '/', '\' } | ForEach-Object { ($_ -split '\\')[0..1] -join '\' } | Sort-Object -Unique

          $final_dirs = $filtered_dirs | Where-Object { 
            $_ -like 'QUALITY*' -or 
            $_ -like 'AUDIT*' -or 
            $_ -like 'RZ*' -or 
            $_ -like 'RCZ*' -or 
            $_ -like 'TZ*' -or 
            $_ -like 'CZ*' -or 
            $_ -like 'SECURITY*' -or
            $_ -like 'MULESOFT*' -or
            $_ -like 'DATA_SHARE*' -or
            $_ -like 'WORK_FLOW_TEST*'
          } | ForEach-Object {
            if ($_ -like 'QUALITY*') {
              "QUALITY"
            } else {
              $_
            }
          } | Sort-Object -Unique

          Write-Host "Modules set: $($final_dirs -join ',')"

          # Set GitHub outputs
          echo "MODULES=$($final_dirs -join ',')" >> $env:GITHUB_OUTPUT
          echo "CHANGED_FILES=$($changed_files -join '|')" >> $env:GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.TOKEN }}

      - name: Replace <module> entries in the XML file & Run mvn liquibase update
        shell: pwsh
        run: |
          $MODULES = "${{ steps.list-changes.outputs.MODULES }}"
          if (-not $MODULES) {
            Write-Host "No modules to include. Exiting."
            exit 0
          }
          $INCLUDEMODULES = $MODULES -split ',' | ForEach-Object { $_ -replace '\\', '/' }
          Write-Host "Modules to include: $INCLUDEMODULES"
          .github\workflows\workflow_scripts\pom_modules_extract.ps1

      - name: Print changed files from previous step
        run: |
          echo "Changed files:"
          echo "${{ steps.list-changes.outputs.CHANGED_FILES }}"

      - name: Add tags using Python script
        run: |
          python .github\workflows\workflow_scripts\a.py "${{ steps.list-changes.outputs.CHANGED_FILES }}"



      # - name: Configure snowflake variables
      #   run: |
      #     $env:JAVA_HOME = $env:JAVA_HOME_11_X64
      #     $env:SNOWFLAKE_ENV_ID = "DEV"
      #     $env:SNOWFLAKE_EXT_STG_ENV = "dev"
      #     $env:SNOWFLAKE_ACCOUNT = "HFEHAXR-WI86289"
      #     $env:SNOWFLAKE_WAREHOUSE = "SNOWFLAKE_LEARNING_WH"
      #     $env:SNOWFLAKE_ROLE = "public"
      #     $env:SNOWFLAKE_USER = "${{ secrets.DEV_SNOWFLAKE_USERNAME }}"
      #     $env:SNOWFLAKE_PASSWORD = "${{ secrets.DEV_SNOWFLAKE_PASSWORD }}"
      #     $env:AWS_ACCOUNT = "958500205200" 
      #     $env:AWS_SDLF_ACCOUNT_ID = "763084030621" 
      #     echo "${{ secrets.DEV_SNF_USER_PRIVATE_KEY }}" > snowflake_rsa_key.p8
      #     $env:SNF_USER_PRIVATE_KEY_PASSWORD = "${{ secrets.DEV_SNF_USER_PRIVATE_KEY_PASSWORD }}"
      #     mvn -version
      #     mvn install 
      #     chmod 600 snowflake_rsa_key.p8
      #     echo "-----------------------Update start: ------------------------------------"
      #     $env:MAVEN_OPTS="-Dnet.snowflake.jdbc.enableBouncyCastle=true" 
      #     mvn liquibase:update
      #   env:
      #     GH_TOKEN: ${{ secrets.TOKEN }}


